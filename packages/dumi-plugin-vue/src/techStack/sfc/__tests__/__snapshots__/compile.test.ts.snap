// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Vue SFC compilation test > custom preprocessors are not supported 1`] = `
{
  "css": "",
  "js": "
console.warn(\\"Custom preprocessors for <template> and <style> are not supported in the Codeblock.\\")
const __sfc__ = {};
import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \\"vue\\";function render(_ctx, _cache) {
  return _openBlock(), _createElementBlock(\\"p\\", null, \\"custom preprocessors are not supported\\");
}
      __sfc__.render = render;",
}
`;

exports[`Vue SFC compilation test > scoped style 1`] = `
{
  "css": "
.example[data-v-xx] {
          color: var(--xx-color);
}
        ",
  "js": "
import { useCssVars as _useCssVars, unref as _unref } from 'vue';
import { openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \\"vue\\";
const _withScopeId = n => (_pushScopeId(\\"data-v-xx\\"), n = n(), _popScopeId(), n);
const _hoisted_1 = {
  class: \\"example\\"
};
const color = 'red';
const __sfc__ = {
  __name: 'xx',
  setup(__props) {
    _useCssVars(_ctx => ({
      \\"xx-color\\": color
    }));
    return (_ctx, _cache) => {
      return _openBlock(), _createElementBlock(\\"div\\", _hoisted_1, \\"hi\\");
    };
  }
};
__sfc__.__scopeId = \\"data-v-xx\\";",
}
`;

exports[`Vue SFC compilation test > script options + jsx 1`] = `
{
  "css": "",
  "js": "
import { withDirectives as _withDirectives, createVNode as _createVNode, vShow as _vShow } from \\"vue\\";
const __sfc__ = {
  data() {
    return {
      visible: true
    };
  },
  render() {
    return _withDirectives(_createVNode(\\"input\\", null, null), [[_vShow, this.visible]]);
  }
};",
}
`;

exports[`Vue SFC compilation test > script setup + template 1`] = `
{
  "css": "",
  "js": "
import { toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock } from \\"vue\\";
const msg = 'Hello!';
const __sfc__ = {
  __name: 'xx',
  setup(__props) {
    function log() {
      console.log(msg);
    }
    return (_ctx, _cache) => {
      return _openBlock(), _createElementBlock(\\"button\\", {
        onClick: log
      }, _toDisplayString(msg));
    };
  }
};",
}
`;

exports[`Vue SFC compilation test > script setup + ts 1`] = `
{
  "css": "",
  "js": "
import { defineComponent as _defineComponent } from 'vue';
import { toDisplayString as _toDisplayString } from \\"vue\\";
const __sfc__ = _defineComponent({
  __name: 'xx',
  props: {
    id: {
      type: null,
      required: true
    },
    msg: {
      type: String,
      required: true
    }
  },
  setup(__props) {
    return (_ctx, _cache) => {
      return _toDisplayString(_ctx.msg);
    };
  }
});",
}
`;

exports[`Vue SFC compilation test > script setup + tsx 1`] = `
{
  "css": "",
  "js": "
import { createVNode as _createVNode, createTextVNode as _createTextVNode, Fragment as _Fragment } from \\"vue\\";
const __sfc__ = {
  setup() {
    return () => _createVNode(_Fragment, null, [_createTextVNode(\\"hello\\")]);
  }
};",
}
`;

exports[`Vue SFC compilation test > script setup 1`] = `
{
  "css": "",
  "js": "
const __sfc__ = {
  __name: 'xx',
  setup(__props) {
    console.log('hello');
    return () => {};
  }
};",
}
`;

exports[`Vue SFC compilation test > template only 1`] = `
{
  "css": "",
  "js": "
const __sfc__ = {};
import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \\"vue\\";function render(_ctx, _cache) {
  return _openBlock(), _createElementBlock(\\"p\\", null, \\"template only\\");
}
      __sfc__.render = render;",
}
`;

exports[`Vue SFC compilation test > two script tags 1`] = `
{
  "css": "",
  "js": "
import { toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, unref as _unref, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \\"vue\\";
import { ref } from 'vue';
import Button from '@lib';
const __default__ = {
  props: ['p']
};
const __sfc__ = Object.assign(__default__, {
  __name: 'xx',
  setup(__props) {
    const msg = ref('hello');
    return (_ctx, _cache) => {
      return _openBlock(), _createBlock(_unref(Button), {
        onClick: _ctx.log
      }, {
        default: _withCtx(() => [_createTextVNode(_toDisplayString(msg.value), 1 /* TEXT */)]),

        _: 1 /* STABLE */
      }, 8 /* PROPS */, [\\"onClick\\"]);
    };
  }
});",
}
`;
